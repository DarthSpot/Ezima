/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUsageChildChildIdGet$Json } from '../fn/usage/api-usage-child-child-id-get-json';
import { ApiUsageChildChildIdGet$Json$Params } from '../fn/usage/api-usage-child-child-id-get-json';
import { apiUsageChildChildIdGet$Plain } from '../fn/usage/api-usage-child-child-id-get-plain';
import { ApiUsageChildChildIdGet$Plain$Params } from '../fn/usage/api-usage-child-child-id-get-plain';
import { apiUsageChildChildIdTotalGet$Json } from '../fn/usage/api-usage-child-child-id-total-get-json';
import { ApiUsageChildChildIdTotalGet$Json$Params } from '../fn/usage/api-usage-child-child-id-total-get-json';
import { apiUsageChildChildIdTotalGet$Plain } from '../fn/usage/api-usage-child-child-id-total-get-plain';
import { ApiUsageChildChildIdTotalGet$Plain$Params } from '../fn/usage/api-usage-child-child-id-total-get-plain';
import { apiUsageGet$Json } from '../fn/usage/api-usage-get-json';
import { ApiUsageGet$Json$Params } from '../fn/usage/api-usage-get-json';
import { apiUsageGet$Plain } from '../fn/usage/api-usage-get-plain';
import { ApiUsageGet$Plain$Params } from '../fn/usage/api-usage-get-plain';
import { apiUsagePost$Json } from '../fn/usage/api-usage-post-json';
import { ApiUsagePost$Json$Params } from '../fn/usage/api-usage-post-json';
import { apiUsagePost$Plain } from '../fn/usage/api-usage-post-plain';
import { ApiUsagePost$Plain$Params } from '../fn/usage/api-usage-post-plain';
import { apiUsageTotalGet$Json } from '../fn/usage/api-usage-total-get-json';
import { ApiUsageTotalGet$Json$Params } from '../fn/usage/api-usage-total-get-json';
import { apiUsageTotalGet$Plain } from '../fn/usage/api-usage-total-get-plain';
import { ApiUsageTotalGet$Plain$Params } from '../fn/usage/api-usage-total-get-plain';
import { apiUsageUsageIdGet$Json } from '../fn/usage/api-usage-usage-id-get-json';
import { ApiUsageUsageIdGet$Json$Params } from '../fn/usage/api-usage-usage-id-get-json';
import { apiUsageUsageIdGet$Plain } from '../fn/usage/api-usage-usage-id-get-plain';
import { ApiUsageUsageIdGet$Plain$Params } from '../fn/usage/api-usage-usage-id-get-plain';
import { RewardUsage } from '../models/reward-usage';

@Injectable({ providedIn: 'root' })
export class UsageApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUsageGet()` */
  static readonly ApiUsageGetPath = '/api/usage';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageGet$Plain$Response(params?: ApiUsageGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RewardUsage>>> {
    return apiUsageGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageGet$Plain(params?: ApiUsageGet$Plain$Params, context?: HttpContext): Observable<Array<RewardUsage>> {
    return this.apiUsageGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RewardUsage>>): Array<RewardUsage> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageGet$Json$Response(params?: ApiUsageGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RewardUsage>>> {
    return apiUsageGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageGet$Json(params?: ApiUsageGet$Json$Params, context?: HttpContext): Observable<Array<RewardUsage>> {
    return this.apiUsageGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RewardUsage>>): Array<RewardUsage> => r.body)
    );
  }

  /** Path part for operation `apiUsagePost()` */
  static readonly ApiUsagePostPath = '/api/usage';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsagePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsagePost$Plain$Response(params?: ApiUsagePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<RewardUsage>> {
    return apiUsagePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsagePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsagePost$Plain(params?: ApiUsagePost$Plain$Params, context?: HttpContext): Observable<RewardUsage> {
    return this.apiUsagePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<RewardUsage>): RewardUsage => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsagePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsagePost$Json$Response(params?: ApiUsagePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<RewardUsage>> {
    return apiUsagePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsagePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiUsagePost$Json(params?: ApiUsagePost$Json$Params, context?: HttpContext): Observable<RewardUsage> {
    return this.apiUsagePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<RewardUsage>): RewardUsage => r.body)
    );
  }

  /** Path part for operation `apiUsageUsageIdGet()` */
  static readonly ApiUsageUsageIdGetPath = '/api/usage/{usageId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageUsageIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageUsageIdGet$Plain$Response(params: ApiUsageUsageIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<RewardUsage>> {
    return apiUsageUsageIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageUsageIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageUsageIdGet$Plain(params: ApiUsageUsageIdGet$Plain$Params, context?: HttpContext): Observable<RewardUsage> {
    return this.apiUsageUsageIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<RewardUsage>): RewardUsage => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageUsageIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageUsageIdGet$Json$Response(params: ApiUsageUsageIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<RewardUsage>> {
    return apiUsageUsageIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageUsageIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageUsageIdGet$Json(params: ApiUsageUsageIdGet$Json$Params, context?: HttpContext): Observable<RewardUsage> {
    return this.apiUsageUsageIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<RewardUsage>): RewardUsage => r.body)
    );
  }

  /** Path part for operation `apiUsageChildChildIdGet()` */
  static readonly ApiUsageChildChildIdGetPath = '/api/usage/child/{childId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageChildChildIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageChildChildIdGet$Plain$Response(params: ApiUsageChildChildIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RewardUsage>>> {
    return apiUsageChildChildIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageChildChildIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageChildChildIdGet$Plain(params: ApiUsageChildChildIdGet$Plain$Params, context?: HttpContext): Observable<Array<RewardUsage>> {
    return this.apiUsageChildChildIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RewardUsage>>): Array<RewardUsage> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageChildChildIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageChildChildIdGet$Json$Response(params: ApiUsageChildChildIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<RewardUsage>>> {
    return apiUsageChildChildIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageChildChildIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageChildChildIdGet$Json(params: ApiUsageChildChildIdGet$Json$Params, context?: HttpContext): Observable<Array<RewardUsage>> {
    return this.apiUsageChildChildIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<RewardUsage>>): Array<RewardUsage> => r.body)
    );
  }

  /** Path part for operation `apiUsageChildChildIdTotalGet()` */
  static readonly ApiUsageChildChildIdTotalGetPath = '/api/usage/child/{childId}/total';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageChildChildIdTotalGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageChildChildIdTotalGet$Plain$Response(params: ApiUsageChildChildIdTotalGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return apiUsageChildChildIdTotalGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageChildChildIdTotalGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageChildChildIdTotalGet$Plain(params: ApiUsageChildChildIdTotalGet$Plain$Params, context?: HttpContext): Observable<number> {
    return this.apiUsageChildChildIdTotalGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageChildChildIdTotalGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageChildChildIdTotalGet$Json$Response(params: ApiUsageChildChildIdTotalGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return apiUsageChildChildIdTotalGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageChildChildIdTotalGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageChildChildIdTotalGet$Json(params: ApiUsageChildChildIdTotalGet$Json$Params, context?: HttpContext): Observable<number> {
    return this.apiUsageChildChildIdTotalGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `apiUsageTotalGet()` */
  static readonly ApiUsageTotalGetPath = '/api/usage/total';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageTotalGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageTotalGet$Plain$Response(params?: ApiUsageTotalGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return apiUsageTotalGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageTotalGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageTotalGet$Plain(params?: ApiUsageTotalGet$Plain$Params, context?: HttpContext): Observable<number> {
    return this.apiUsageTotalGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsageTotalGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageTotalGet$Json$Response(params?: ApiUsageTotalGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return apiUsageTotalGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsageTotalGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsageTotalGet$Json(params?: ApiUsageTotalGet$Json$Params, context?: HttpContext): Observable<number> {
    return this.apiUsageTotalGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

}
