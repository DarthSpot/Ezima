/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiChildChildIdGet$Json } from '../fn/child/api-child-child-id-get-json';
import { ApiChildChildIdGet$Json$Params } from '../fn/child/api-child-child-id-get-json';
import { apiChildChildIdGet$Plain } from '../fn/child/api-child-child-id-get-plain';
import { ApiChildChildIdGet$Plain$Params } from '../fn/child/api-child-child-id-get-plain';
import { apiChildGet$Json } from '../fn/child/api-child-get-json';
import { ApiChildGet$Json$Params } from '../fn/child/api-child-get-json';
import { apiChildGet$Plain } from '../fn/child/api-child-get-plain';
import { ApiChildGet$Plain$Params } from '../fn/child/api-child-get-plain';
import { apiChildInfosGet$Json } from '../fn/child/api-child-infos-get-json';
import { ApiChildInfosGet$Json$Params } from '../fn/child/api-child-infos-get-json';
import { apiChildInfosGet$Plain } from '../fn/child/api-child-infos-get-plain';
import { ApiChildInfosGet$Plain$Params } from '../fn/child/api-child-infos-get-plain';
import { apiChildPost$Json } from '../fn/child/api-child-post-json';
import { ApiChildPost$Json$Params } from '../fn/child/api-child-post-json';
import { apiChildPost$Plain } from '../fn/child/api-child-post-plain';
import { ApiChildPost$Plain$Params } from '../fn/child/api-child-post-plain';
import { Child } from '../models/child';
import { ChildInfo } from '../models/child-info';

@Injectable({ providedIn: 'root' })
export class ChildApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiChildGet()` */
  static readonly ApiChildGetPath = '/api/child';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildGet$Plain$Response(params?: ApiChildGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Child>>> {
    return apiChildGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildGet$Plain(params?: ApiChildGet$Plain$Params, context?: HttpContext): Observable<Array<Child>> {
    return this.apiChildGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Child>>): Array<Child> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildGet$Json$Response(params?: ApiChildGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Child>>> {
    return apiChildGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildGet$Json(params?: ApiChildGet$Json$Params, context?: HttpContext): Observable<Array<Child>> {
    return this.apiChildGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Child>>): Array<Child> => r.body)
    );
  }

  /** Path part for operation `apiChildPost()` */
  static readonly ApiChildPostPath = '/api/child';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildPost$Plain$Response(params?: ApiChildPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildPost$Plain(params?: ApiChildPost$Plain$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildPost$Json$Response(params?: ApiChildPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildPost$Json(params?: ApiChildPost$Json$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /** Path part for operation `apiChildInfosGet()` */
  static readonly ApiChildInfosGetPath = '/api/child/infos';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildInfosGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildInfosGet$Plain$Response(params?: ApiChildInfosGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ChildInfo>>> {
    return apiChildInfosGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildInfosGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildInfosGet$Plain(params?: ApiChildInfosGet$Plain$Params, context?: HttpContext): Observable<Array<ChildInfo>> {
    return this.apiChildInfosGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ChildInfo>>): Array<ChildInfo> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildInfosGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildInfosGet$Json$Response(params?: ApiChildInfosGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ChildInfo>>> {
    return apiChildInfosGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildInfosGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildInfosGet$Json(params?: ApiChildInfosGet$Json$Params, context?: HttpContext): Observable<Array<ChildInfo>> {
    return this.apiChildInfosGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ChildInfo>>): Array<ChildInfo> => r.body)
    );
  }

  /** Path part for operation `apiChildChildIdGet()` */
  static readonly ApiChildChildIdGetPath = '/api/child/{childId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdGet$Plain$Response(params: ApiChildChildIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdGet$Plain(params: ApiChildChildIdGet$Plain$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdGet$Json$Response(params: ApiChildChildIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdGet$Json(params: ApiChildChildIdGet$Json$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

}
