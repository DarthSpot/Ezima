/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiChildChildIdActivityPost$Json } from '../fn/child/api-child-child-id-activity-post-json';
import { ApiChildChildIdActivityPost$Json$Params } from '../fn/child/api-child-child-id-activity-post-json';
import { apiChildChildIdActivityPost$Plain } from '../fn/child/api-child-child-id-activity-post-plain';
import { ApiChildChildIdActivityPost$Plain$Params } from '../fn/child/api-child-child-id-activity-post-plain';
import { apiChildChildIdGet$Json } from '../fn/child/api-child-child-id-get-json';
import { ApiChildChildIdGet$Json$Params } from '../fn/child/api-child-child-id-get-json';
import { apiChildChildIdGet$Plain } from '../fn/child/api-child-child-id-get-plain';
import { ApiChildChildIdGet$Plain$Params } from '../fn/child/api-child-child-id-get-plain';
import { apiChildChildIdRewardGet$Json } from '../fn/child/api-child-child-id-reward-get-json';
import { ApiChildChildIdRewardGet$Json$Params } from '../fn/child/api-child-child-id-reward-get-json';
import { apiChildChildIdRewardGet$Plain } from '../fn/child/api-child-child-id-reward-get-plain';
import { ApiChildChildIdRewardGet$Plain$Params } from '../fn/child/api-child-child-id-reward-get-plain';
import { apiChildChildIdRewardPost$Json } from '../fn/child/api-child-child-id-reward-post-json';
import { ApiChildChildIdRewardPost$Json$Params } from '../fn/child/api-child-child-id-reward-post-json';
import { apiChildChildIdRewardPost$Plain } from '../fn/child/api-child-child-id-reward-post-plain';
import { ApiChildChildIdRewardPost$Plain$Params } from '../fn/child/api-child-child-id-reward-post-plain';
import { apiChildChildIdUsagePost$Json } from '../fn/child/api-child-child-id-usage-post-json';
import { ApiChildChildIdUsagePost$Json$Params } from '../fn/child/api-child-child-id-usage-post-json';
import { apiChildChildIdUsagePost$Plain } from '../fn/child/api-child-child-id-usage-post-plain';
import { ApiChildChildIdUsagePost$Plain$Params } from '../fn/child/api-child-child-id-usage-post-plain';
import { apiChildGet$Json } from '../fn/child/api-child-get-json';
import { ApiChildGet$Json$Params } from '../fn/child/api-child-get-json';
import { apiChildGet$Plain } from '../fn/child/api-child-get-plain';
import { ApiChildGet$Plain$Params } from '../fn/child/api-child-get-plain';
import { apiChildPost$Json } from '../fn/child/api-child-post-json';
import { ApiChildPost$Json$Params } from '../fn/child/api-child-post-json';
import { apiChildPost$Plain } from '../fn/child/api-child-post-plain';
import { ApiChildPost$Plain$Params } from '../fn/child/api-child-post-plain';
import { Child } from '../models/child';

@Injectable({ providedIn: 'root' })
export class ChildApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiChildGet()` */
  static readonly ApiChildGetPath = '/api/child';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildGet$Plain$Response(params?: ApiChildGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Child>>> {
    return apiChildGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildGet$Plain(params?: ApiChildGet$Plain$Params, context?: HttpContext): Observable<Array<Child>> {
    return this.apiChildGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Child>>): Array<Child> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildGet$Json$Response(params?: ApiChildGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Child>>> {
    return apiChildGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildGet$Json(params?: ApiChildGet$Json$Params, context?: HttpContext): Observable<Array<Child>> {
    return this.apiChildGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Child>>): Array<Child> => r.body)
    );
  }

  /** Path part for operation `apiChildPost()` */
  static readonly ApiChildPostPath = '/api/child';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildPost$Plain$Response(params?: ApiChildPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildPost$Plain(params?: ApiChildPost$Plain$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildPost$Json$Response(params?: ApiChildPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildPost$Json(params?: ApiChildPost$Json$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /** Path part for operation `apiChildChildIdGet()` */
  static readonly ApiChildChildIdGetPath = '/api/child/{childId}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdGet$Plain$Response(params: ApiChildChildIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdGet$Plain(params: ApiChildChildIdGet$Plain$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdGet$Json$Response(params: ApiChildChildIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdGet$Json(params: ApiChildChildIdGet$Json$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /** Path part for operation `apiChildChildIdActivityPost()` */
  static readonly ApiChildChildIdActivityPostPath = '/api/child/{childId}/activity';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdActivityPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdActivityPost$Plain$Response(params: ApiChildChildIdActivityPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdActivityPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdActivityPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdActivityPost$Plain(params: ApiChildChildIdActivityPost$Plain$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdActivityPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdActivityPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdActivityPost$Json$Response(params: ApiChildChildIdActivityPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdActivityPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdActivityPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdActivityPost$Json(params: ApiChildChildIdActivityPost$Json$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdActivityPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /** Path part for operation `apiChildChildIdRewardGet()` */
  static readonly ApiChildChildIdRewardGetPath = '/api/child/{childId}/reward';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdRewardGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdRewardGet$Plain$Response(params: ApiChildChildIdRewardGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdRewardGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdRewardGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdRewardGet$Plain(params: ApiChildChildIdRewardGet$Plain$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdRewardGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdRewardGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdRewardGet$Json$Response(params: ApiChildChildIdRewardGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdRewardGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdRewardGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiChildChildIdRewardGet$Json(params: ApiChildChildIdRewardGet$Json$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdRewardGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /** Path part for operation `apiChildChildIdRewardPost()` */
  static readonly ApiChildChildIdRewardPostPath = '/api/child/{childId}/reward';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdRewardPost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdRewardPost$Plain$Response(params: ApiChildChildIdRewardPost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdRewardPost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdRewardPost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdRewardPost$Plain(params: ApiChildChildIdRewardPost$Plain$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdRewardPost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdRewardPost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdRewardPost$Json$Response(params: ApiChildChildIdRewardPost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdRewardPost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdRewardPost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdRewardPost$Json(params: ApiChildChildIdRewardPost$Json$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdRewardPost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /** Path part for operation `apiChildChildIdUsagePost()` */
  static readonly ApiChildChildIdUsagePostPath = '/api/child/{childId}/usage';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdUsagePost$Plain()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdUsagePost$Plain$Response(params: ApiChildChildIdUsagePost$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdUsagePost$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdUsagePost$Plain$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdUsagePost$Plain(params: ApiChildChildIdUsagePost$Plain$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdUsagePost$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiChildChildIdUsagePost$Json()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdUsagePost$Json$Response(params: ApiChildChildIdUsagePost$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Child>> {
    return apiChildChildIdUsagePost$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiChildChildIdUsagePost$Json$Response()` instead.
   *
   * This method sends `application/*+json` and handles request body of type `application/*+json`.
   */
  apiChildChildIdUsagePost$Json(params: ApiChildChildIdUsagePost$Json$Params, context?: HttpContext): Observable<Child> {
    return this.apiChildChildIdUsagePost$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Child>): Child => r.body)
    );
  }

}
