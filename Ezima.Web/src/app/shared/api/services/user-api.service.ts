/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUserUserGet$Json } from '../fn/user/api-user-user-get-json';
import { ApiUserUserGet$Json$Params } from '../fn/user/api-user-user-get-json';
import { apiUserUserGet$Plain } from '../fn/user/api-user-user-get-plain';
import { ApiUserUserGet$Plain$Params } from '../fn/user/api-user-user-get-plain';
import { apiUserUserIdGet$Json } from '../fn/user/api-user-user-id-get-json';
import { ApiUserUserIdGet$Json$Params } from '../fn/user/api-user-user-id-get-json';
import { apiUserUserIdGet$Plain } from '../fn/user/api-user-user-id-get-plain';
import { ApiUserUserIdGet$Plain$Params } from '../fn/user/api-user-user-id-get-plain';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class UserApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUserUserGet()` */
  static readonly ApiUserUserGetPath = '/api/user/User';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserUserGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserUserGet$Plain$Response(params?: ApiUserUserGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
    return apiUserUserGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserUserGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserUserGet$Plain(params?: ApiUserUserGet$Plain$Params, context?: HttpContext): Observable<Array<User>> {
    return this.apiUserUserGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserUserGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserUserGet$Json$Response(params?: ApiUserUserGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
    return apiUserUserGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserUserGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserUserGet$Json(params?: ApiUserUserGet$Json$Params, context?: HttpContext): Observable<Array<User>> {
    return this.apiUserUserGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)
    );
  }

  /** Path part for operation `apiUserUserIdGet()` */
  static readonly ApiUserUserIdGetPath = '/api/user/User/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserUserIdGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserUserIdGet$Plain$Response(params: ApiUserUserIdGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return apiUserUserIdGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserUserIdGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserUserIdGet$Plain(params: ApiUserUserIdGet$Plain$Params, context?: HttpContext): Observable<User> {
    return this.apiUserUserIdGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUserUserIdGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserUserIdGet$Json$Response(params: ApiUserUserIdGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return apiUserUserIdGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUserUserIdGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUserUserIdGet$Json(params: ApiUserUserIdGet$Json$Params, context?: HttpContext): Observable<User> {
    return this.apiUserUserIdGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

}
