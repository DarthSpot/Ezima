/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiAuthGet$Json } from '../fn/auth/api-auth-get-json';
import { ApiAuthGet$Json$Params } from '../fn/auth/api-auth-get-json';
import { apiAuthGet$Plain } from '../fn/auth/api-auth-get-plain';
import { ApiAuthGet$Plain$Params } from '../fn/auth/api-auth-get-plain';
import { getTokenGet } from '../fn/auth/get-token-get';
import { GetTokenGet$Params } from '../fn/auth/get-token-get';
import { loginGet } from '../fn/auth/login-get';
import { LoginGet$Params } from '../fn/auth/login-get';
import { UserInfo } from '../models/user-info';
import { wellKnownJwksJsonGet } from '../fn/auth/well-known-jwks-json-get';
import { WellKnownJwksJsonGet$Params } from '../fn/auth/well-known-jwks-json-get';

@Injectable({ providedIn: 'root' })
export class AuthApiService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiAuthGet()` */
  static readonly ApiAuthGetPath = '/api/auth';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthGet$Plain()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthGet$Plain$Response(params?: ApiAuthGet$Plain$Params, context?: HttpContext): Observable<StrictHttpResponse<UserInfo>> {
    return apiAuthGet$Plain(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthGet$Plain$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthGet$Plain(params?: ApiAuthGet$Plain$Params, context?: HttpContext): Observable<UserInfo> {
    return this.apiAuthGet$Plain$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserInfo>): UserInfo => r.body)
    );
  }

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiAuthGet$Json()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthGet$Json$Response(params?: ApiAuthGet$Json$Params, context?: HttpContext): Observable<StrictHttpResponse<UserInfo>> {
    return apiAuthGet$Json(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiAuthGet$Json$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiAuthGet$Json(params?: ApiAuthGet$Json$Params, context?: HttpContext): Observable<UserInfo> {
    return this.apiAuthGet$Json$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserInfo>): UserInfo => r.body)
    );
  }

  /** Path part for operation `loginGet()` */
  static readonly LoginGetPath = '/login';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `loginGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginGet$Response(params?: LoginGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return loginGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `loginGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  loginGet(params?: LoginGet$Params, context?: HttpContext): Observable<void> {
    return this.loginGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `wellKnownJwksJsonGet()` */
  static readonly WellKnownJwksJsonGetPath = '/.well-known/jwks.json';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `wellKnownJwksJsonGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  wellKnownJwksJsonGet$Response(params?: WellKnownJwksJsonGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return wellKnownJwksJsonGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `wellKnownJwksJsonGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  wellKnownJwksJsonGet(params?: WellKnownJwksJsonGet$Params, context?: HttpContext): Observable<void> {
    return this.wellKnownJwksJsonGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `getTokenGet()` */
  static readonly GetTokenGetPath = '/get-token';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTokenGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTokenGet$Response(params?: GetTokenGet$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return getTokenGet(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTokenGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTokenGet(params?: GetTokenGet$Params, context?: HttpContext): Observable<void> {
    return this.getTokenGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
